desc: MIDI Bank MSB/LSB Mapping
desc: MIDI Bank MSB/LSB Mapping [zaibuyidao]
version: 1.0.1
changelog: init
author: zaibuyidao
links:
  webpage https://www.soundengine.cn/user/%E5%86%8D%E8%A3%9C%E4%B8%80%E5%88%80
  github https://github.com/zaibuyidao/ReaScripts
donate: http://www.paypal.me/zaibuyidao
provides: [data] zaibuyidao_bank_msb_lsb_mapping/*.txt
about:
  This script processes incoming MIDI Bank MSB (Controller 0) and LSB (Controller 32) messages and maps them to new MSB and LSB values based on a user-defined configuration file.
  Create a bank mapping file with lines formatted as follows:
  <source_MSB>-<source_LSB>=<target_MSB>-<target_LSB>
  Example:
  0-100=0-96  // Maps incoming Bank MSB 0 and LSB 100 to new Bank MSB 0 and LSB 96
  1-10=2-77   // Maps incoming Bank MSB 1 and LSB 10 to new Bank MSB 2 and LSB 77
  
  When a matching Bank MSB and LSB is received, the script will output the corresponding mapped MSB and LSB values. If no match is found, the original values will be passed through unchanged.
  Note: Ensure that your bank mapping file is correctly formatted to avoid unexpected results.
  
slider1:/zaibuyidao_bank_msb_lsb_mapping:bank_map:Bank MSB/LSB Mapping:

@init
file_selected = -1;
MAX_NUM_MAPS = 256; // 初始映射数量
map_config_size = MAX_NUM_MAPS * 4; // 每个映射占用4个槽位（源MSB, 源LSB, 目标MSB, 目标LSB）
map_config[map_config_size]; // 声明具有固定大小的数组
memset(map_config, -1, map_config_size); // 将数组元素初始化为-1
map_index = 0;

function increase_map_config_size() (
    temp = map_config_size;
    map_config_size += MAX_NUM_MAPS * 4; // 扩展数组大小
    map_config[temp] = 0; // 调整数组大小
    memset(map_config + temp, -1, MAX_NUM_MAPS * 4); // 初始化新扩展的部分
);

@slider
file_selected != slider1 ? (
  file_selected = slider1;
  handle = file_open(slider1); // 打开文件
  handle > 0 ? (
    line = #;
    map_index = 0; // 配置索引归零

    while(file_string(handle, line) > 0) (
      skip_line = strncmp(line, "//", 2) == 0 || line == ""; // 跳过注释和空行
      !skip_line ? (
        source_msb = 0; source_lsb = 0; target_msb = 0; target_lsb = 0;
        str_pos = 0; field = 0;

        while (str_pos < strlen(line)) (
          c = str_getchar(line, str_pos);
          c == '-' ? field += 1 : 0;
          c == '=' ? field = 2 : 0;
          c >= '0' && c <= '9' ? (
            field == 0 ? (
              source_msb = source_msb * 10 + (c - '0');
            ) : field == 1 ? (
              source_lsb = source_lsb * 10 + (c - '0');
            ) : field == 2 ? (
              target_msb = target_msb * 10 + (c - '0');
            ) : field == 3 ? (
              target_lsb = target_lsb * 10 + (c - '0');
            );
          ) : 0;
          str_pos += 1;
        );

        // 存储映射配置
        (map_index + 4 >= map_config_size) ? increase_map_config_size(); // 检查并扩展数组
        map_config[map_index] = source_msb;
        map_config[map_index + 1] = source_lsb;
        map_config[map_index + 2] = target_msb;
        map_config[map_index + 3] = target_lsb;
        map_index += 4; // 每存储一个完整的映射,将索引增加4
      );
    );
    file_close(handle); // 处理完文件后关闭
  ) : 0;
) : 0;

@block
bank_msb = -1;
bank_lsb = -1;
match_found = 0;

while(midirecv(offset, msg1, msg2, msg3)) (
  status = (msg1 & 0xF0); // 获取消息类型
  channel = (msg1 & 0x0F); // 获取MIDI通道

  // 检查是否接收到控制变更消息
  status == 0xB0 ? (
    controller = msg2;
    value = msg3;

    controller == 0 ? (
      bank_msb = value;
    ) : controller == 32 ? (
      bank_lsb = value;

      // 检查是否接收到完整的库和程序组合
      (bank_msb != -1 && bank_lsb != -1) ? (
        matched_index = -1;
        i = 0;
        while (i < map_index) ( // 遍历映射配置
          map_index_msb = i;
          map_index_lsb = i + 1;
          (map_config[map_index_msb] == bank_msb && map_config[map_index_lsb] == bank_lsb) ? (
            matched_index = i;
            break;
          );
          i += 4;
        );

        matched_index != -1 ? (
          target_msb = map_config[matched_index + 2];
          target_lsb = map_config[matched_index + 3];
          midisend(offset, 0xB0 | channel, 0, target_msb); // 发送新的MSB
          midisend(offset, 0xB0 | channel, 32, target_lsb); // 发送新的LSB
        ) : (
          // 如果未找到匹配项，则透传原始的库选择事件
          midisend(offset, 0xB0 | channel, 0, bank_msb);
          midisend(offset, 0xB0 | channel, 32, bank_lsb);
        );

        // 重置库值
        bank_msb = -1;
        bank_lsb = -1;
      );
    );
  ) : (
    // 透传其他MIDI事件
    midisend(offset, msg1, msg2, msg3);
  );
);